// Generated by gencpp from file fetch_train/EeRpyResponse.msg
// DO NOT EDIT!


#ifndef FETCH_TRAIN_MESSAGE_EERPYRESPONSE_H
#define FETCH_TRAIN_MESSAGE_EERPYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fetch_train
{
template <class ContainerAllocator>
struct EeRpyResponse_
{
  typedef EeRpyResponse_<ContainerAllocator> Type;

  EeRpyResponse_()
    : r(0.0)
    , p(0.0)
    , y(0.0)  {
    }
  EeRpyResponse_(const ContainerAllocator& _alloc)
    : r(0.0)
    , p(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef float _r_type;
  _r_type r;

   typedef float _p_type;
  _p_type p;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::fetch_train::EeRpyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetch_train::EeRpyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EeRpyResponse_

typedef ::fetch_train::EeRpyResponse_<std::allocator<void> > EeRpyResponse;

typedef boost::shared_ptr< ::fetch_train::EeRpyResponse > EeRpyResponsePtr;
typedef boost::shared_ptr< ::fetch_train::EeRpyResponse const> EeRpyResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetch_train::EeRpyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetch_train::EeRpyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fetch_train

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/melodic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_train::EeRpyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_train::EeRpyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_train::EeRpyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfb6f20560ab4d9cc1d682755cf3b5d4";
  }

  static const char* value(const ::fetch_train::EeRpyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfb6f20560ab4d9cULL;
  static const uint64_t static_value2 = 0xc1d682755cf3b5d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetch_train/EeRpyResponse";
  }

  static const char* value(const ::fetch_train::EeRpyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r\n"
"float32 p\n"
"float32 y\n"
;
  }

  static const char* value(const ::fetch_train::EeRpyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.p);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EeRpyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetch_train::EeRpyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetch_train::EeRpyResponse_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "p: ";
    Printer<float>::stream(s, indent + "  ", v.p);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCH_TRAIN_MESSAGE_EERPYRESPONSE_H
